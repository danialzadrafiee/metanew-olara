<!-- <?php

namespace App\Http\Controllers;

use Auth;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;
use Web3\Web3;
use Web3\Contract;
use Web3\Providers\HttpProvider;
use Web3\RequestManagers\HttpRequestManager;

class UserSpotController extends Controller
{
    public function depositAsset(Request $request)
    {
        $validated = $this->validateRequest($request, [
            'asset_type' => 'required|in:bnb,meta',
            'amount' => 'required|numeric|min:0',
            'transaction_hash' => 'required|string',
        ]);

        $user = Auth::user();

        if (!$this->validateTransaction($validated['transaction_hash'], $user->address, $validated['asset_type'], $validated['amount'])) {
            return response()->json(['error' => 'Invalid transaction'], 400);
        }

        if ($user->addAsset($validated['asset_type'], $validated['amount'])) {
            Log::info("User {$user->id} deposited {$validated['amount']} {$validated['asset_type']}. Transaction hash: {$validated['transaction_hash']}");
            return response()->json(['message' => 'Deposit successful', 'new_balance' => $user->getAssetAttribute($validated['asset_type'])]);
        }

        Log::error("Failed to deposit {$validated['amount']} {$validated['asset_type']} for user {$user->id}. Transaction hash: {$validated['transaction_hash']}");
        return response()->json(['error' => 'Failed to process deposit'], 500);
    }

    public function withdrawAsset(Request $request)
    {
        $validated = $this->validateRequest($request, [
            'asset_type' => 'required|in:bnb,meta',
            'amount' => 'required|numeric|min:0',
            'destination_address' => 'required|string',
        ]);

        $user = Auth::user();

        if (!$user->hasSufficientAsset($validated['asset_type'], $validated['amount'])) {
            return response()->json(['error' => 'Insufficient balance'], 400);
        }

        $transactionHash = $this->sendAssetOnChain($validated['asset_type'], $validated['amount'], $user->address, $validated['destination_address']);

        if (!$transactionHash) {
            return response()->json(['error' => 'Failed to process withdrawal'], 500);
        }

        if ($user->removeAsset($validated['asset_type'], $validated['amount'])) {
            Log::info("User {$user->id} withdrew {$validated['amount']} {$validated['asset_type']} to {$validated['destination_address']}. Transaction hash: {$transactionHash}");
            return response()->json([
                'message' => 'Withdrawal successful',
                'transaction_hash' => $transactionHash,
                'new_balance' => $user->getAssetAttribute($validated['asset_type'])
            ]);
        }

        Log::error("Failed to withdraw {$validated['amount']} {$validated['asset_type']} for user {$user->id} to {$validated['destination_address']}");
        return response()->json(['error' => 'Failed to process withdrawal'], 500);
    }

    private function validateRequest(Request $request, array $rules)
    {
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            response()->json(['errors' => $validator->errors()], 400)->send();
            exit;
        }
        return $validator->validated();
    }

    private function validateTransaction($transactionHash, $userAddress, $assetType, $amount)
    {
        $web3 = new Web3(new HttpProvider(new HttpRequestManager(env('ETHEREUM_NODE_URL'))));

        try {
            $web3->eth->getTransactionReceipt($transactionHash, function ($err, $transaction) use ($userAddress, $assetType, $amount) {
                if ($err !== null) {
                    Log::error("Failed to retrieve transaction: " . $err->getMessage());
                    return false;
                }

                if ($transaction === null) {
                    Log::error("Transaction not found");
                    return false;
                }

                // Verify transaction status
                if ($transaction->status !== '0x1') {
                    Log::error("Transaction failed or pending");
                    return false;
                }

                // Verify recipient address (your contract or wallet address)
                $expectedRecipient = env('DEPOSIT_ADDRESS');
                if (strtolower($transaction->to) !== strtolower($expectedRecipient)) {
                    Log::error("Invalid recipient address");
                    return false;
                }

                // Verify sender address
                if (strtolower($transaction->from) !== strtolower($userAddress)) {
                    Log::error("Transaction sender doesn't match user address");
                    return false;
                }

                // Verify asset type and amount
                if ($assetType === 'bnb') {
                    $expectedWei = bcmul($amount, '1000000000000000000'); // Convert to Wei
                    if ($transaction->value !== $expectedWei) {
                        Log::error("Transaction amount doesn't match");
                        return false;
                    }
                } elseif ($assetType === 'meta') {
                    // For ERC20 tokens, you need to decode the transaction input
                    $inputData = $transaction->input;
                    $methodId = substr($inputData, 0, 10);
                    $expectedMethodId = '0xa9059cbb'; // transfer method ID

                    if ($methodId !== $expectedMethodId) {
                        Log::error("Invalid method ID for META token transfer");
                        return false;
                    }

                    $tokenAmount = hexdec(substr($inputData, -64));
                    $expectedTokenAmount = $amount * (10 ** 18); // Assuming 18 decimals for META token
                    if ($tokenAmount !== $expectedTokenAmount) {
                        Log::error("Token amount doesn't match");
                        return false;
                    }
                }

                return true;
            });
        } catch (\Exception $e) {
            Log::error("Error validating transaction: " . $e->getMessage());
            return false;
        }
    }

    private function sendAssetOnChain($assetType, $amount, $fromAddress, $toAddress)
    {
        // TODO: Implement web3 interaction to send the asset on-chain
        // This is a placeholder implementation. You should replace this with actual blockchain interaction.
        $web3 = new Web3(new HttpProvider(new HttpRequestManager(env('ETHEREUM_NODE_URL'))));

        try {
            if ($assetType === 'bnb') {
                // Send BNB
                $web3->eth->sendTransaction([
                    'from' => $fromAddress,
                    'to' => $toAddress,
                    'value' => $amount * 1e18, // Convert to Wei
                    'gas' => '21000',
                    'gasPrice' => $web3->eth->gasPrice(),
                ], function ($err, $transaction) use (&$transactionHash) {
                    if ($err !== null) {
                        Log::error("Failed to send BNB: " . $err->getMessage());
                        return null;
                    }
                    $transactionHash = $transaction;
                });
            } elseif ($assetType === 'meta') {
                // Send META token
                // You'll need to implement the ERC20 token transfer here
                // This is a simplified example and needs to be adjusted based on your specific token contract
                $contractABI = json_decode(file_get_contents(storage_path('app/MetaTokenABI.json')), true);
                $contractAddress = env('META_TOKEN_CONTRACT_ADDRESS');
                $contract = new Contract($web3->provider, $contractABI);

                $contract->at($contractAddress)->send('transfer', $toAddress, $amount * 1e18, [
                    'from' => $fromAddress,
                    'gas' => '60000',
                    'gasPrice' => $web3->eth->gasPrice(),
                ], function ($err, $transaction) use (&$transactionHash) {
                    if ($err !== null) {
                        Log::error("Failed to send META token: " . $err->getMessage());
                        return null;
                    }
                    $transactionHash = $transaction;
                });
            }

            return $transactionHash;
        } catch (\Exception $e) {
            Log::error("Error sending asset on-chain: " . $e->getMessage());
            return null;
        }
    }
} -->